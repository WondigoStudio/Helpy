import logging
from datetime import datetime, timedelta
from telegram import Update, ChatPermissions
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import sqlite3
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("moderation.db", check_same_thread=False)
c = conn.cursor()
c.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER,
        chat_id INTEGER,
        warns INTEGER DEFAULT 0,
        mutes INTEGER DEFAULT 0,
        mute_until TEXT
    )
''')
conn.commit()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def update_user(user_id, chat_id):
    c.execute("SELECT * FROM users WHERE user_id=? AND chat_id=?", (user_id, chat_id))
    if not c.fetchone():
        c.execute("INSERT INTO users (user_id, chat_id, warns, mutes) VALUES (?, ?, 0, 0)", (user_id, chat_id))
        conn.commit()

def parse_duration(duration: str):
    try:
        if duration.endswith("m"):
            return int(duration[:-1]) * 60
        elif duration.endswith("h"):
            return int(duration[:-1]) * 3600
        elif duration.endswith("d"):
            return int(duration[:-1]) * 86400
    except:
        return None

async def unmute_later(context: ContextTypes.DEFAULT_TYPE, chat_id, user_id, until):
    delay = (until - datetime.utcnow()).total_seconds()
    await asyncio.sleep(delay)
    permissions = ChatPermissions(can_send_messages=True)
    await context.bot.restrict_chat_member(chat_id, user_id, permissions)
    c.execute("UPDATE users SET mute_until=NULL WHERE user_id=? AND chat_id=?", (user_id, chat_id))
    conn.commit()

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def warn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /warn –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user = update.message.reply_to_message.from_user
    chat_id = update.effective_chat.id
    await update_user(user.id, chat_id)

    c.execute("UPDATE users SET warns = warns + 1 WHERE user_id=? AND chat_id=?", (user.id, chat_id))
    conn.commit()

    c.execute("SELECT warns FROM users WHERE user_id=? AND chat_id=?", (user.id, chat_id))
    warns = c.fetchone()[0]
    await update.message.reply_text(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {user.mention_html()} | –í—Å–µ–≥–æ: {warns}", parse_mode='HTML')

    if warns >= 2:
        until = datetime.utcnow() + timedelta(hours=24)
        permissions = ChatPermissions(can_send_messages=False)
        await context.bot.restrict_chat_member(chat_id, user.id, permissions, until_date=until)
        c.execute("UPDATE users SET warns=0, mutes=mutes+1, mute_until=? WHERE user_id=? AND chat_id=?", (until.isoformat(), user.id, chat_id))
        conn.commit()
        await update.message.reply_text(f"{user.mention_html()} –∑–∞–º—É—á–µ–Ω –Ω–∞ 24 —á–∞—Å–∞ –∑–∞ 2 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.", parse_mode='HTML')
        asyncio.create_task(unmute_later(context, chat_id, user.id, until))

async def mut(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message or not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mut –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: /mut 5m")
        return

    user = update.message.reply_to_message.from_user
    chat_id = update.effective_chat.id
    duration = context.args[0]

    seconds = parse_duration(duration)
    if seconds is None:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä—ã: 5m, 2h, 1d")
        return

    until = datetime.utcnow() + timedelta(seconds=seconds)
    permissions = ChatPermissions(can_send_messages=False)
    await context.bot.restrict_chat_member(chat_id, user.id, permissions, until_date=until)
    await update_user(user.id, chat_id)
    c.execute("UPDATE users SET mutes = mutes + 1, mute_until=? WHERE user_id=? AND chat_id=?", (until.isoformat(), user.id, chat_id))
    conn.commit()
    await update.message.reply_text(f"{user.mention_html()} –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration}.", parse_mode='HTML')
    asyncio.create_task(unmute_later(context, chat_id, user.id, until))

async def unmut(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unmut –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user = update.message.reply_to_message.from_user
    chat_id = update.effective_chat.id
    permissions = ChatPermissions(can_send_messages=True)
    await context.bot.restrict_chat_member(chat_id, user.id, permissions)
    c.execute("UPDATE users SET mute_until=NULL WHERE user_id=? AND chat_id=?", (user.id, chat_id))
    conn.commit()
    await update.message.reply_text(f"{user.mention_html()} —Ä–∞–∑–º—É—á–µ–Ω.", parse_mode='HTML')

async def unwarn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unwarn –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user = update.message.reply_to_message.from_user
    chat_id = update.effective_chat.id
    c.execute("SELECT warns FROM users WHERE user_id=? AND chat_id=?", (user.id, chat_id))
    warns = c.fetchone()
    if warns and warns[0] > 0:
        c.execute("UPDATE users SET warns = warns - 1 WHERE user_id=? AND chat_id=?", (user.id, chat_id))
        conn.commit()
        await update.message.reply_text(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å–Ω—è—Ç–æ. –û—Å—Ç–∞–ª–æ—Å—å: {warns[0]-1}")
    else:
        await update.message.reply_text("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.")

async def rep(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /rep –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user = update.message.reply_to_message.from_user
    chat_id = update.effective_chat.id
    await update_user(user.id, chat_id)
    c.execute("SELECT warns, mutes, mute_until FROM users WHERE user_id=? AND chat_id=?", (user.id, chat_id))
    warns, mutes, mute_until = c.fetchone()
    mute_status = "–ú—É—Ç –¥–æ " + mute_until if mute_until else "–ù–µ –≤ –º—É—Ç–µ"
    await update.message.reply_text(
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user.mention_html()}\n–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warns}\n–ú—É—Ç–æ–≤: {mutes}\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {mute_status}",
        parse_mode='HTML')

async def admininfo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    commands_text = (
        "üõ† <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n"
        "‚ö†Ô∏è <b>/warn</b> ‚Äî –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –ü–æ—Å–ª–µ 2-—Ö ‚Äî –º—É—Ç –Ω–∞ 24 —á–∞—Å–∞.\n"
        "‚ôªÔ∏è <b>/unwarn</b> ‚Äî —É–±—Ä–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.\n"
        "üîá <b>/mut 5m</b> ‚Äî –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5m, 2h).\n"
        "üîä <b>/unmut</b> ‚Äî —Å–Ω—è—Ç—å –º—É—Ç –¥–æ—Å—Ä–æ—á–Ω–æ.\n"
        "üî® <b>/ban</b> ‚Äî –∑–∞–±–∞–Ω–∏—Ç—å (—É–¥–∞–ª–∏—Ç—å) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã.\n"
        "üìä <b>/rep</b> ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–µ–¥—ã –∏ –º—É—Ç—ã).\n"
        "üìã <b>/admininfo</b> ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥.\n\n"
        "‚è≥ <i>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:</i>\n"
        "‚Äî –ü–æ—Å–ª–µ –¥–≤—É—Ö /warn –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º—É—Ç–∏—Ç—Å—è –Ω–∞ 24—á.\n"
        "‚Äî –ü–æ—Å–ª–µ 24—á –º—É—Ç–∞ ‚Äî —Ä–∞–∑–º—É—Ç –∏ –æ–±–Ω—É–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.\n"
    )
    await update.message.reply_text(commands_text, parse_mode="HTML")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async def main():
    app = ApplicationBuilder().token("YOUR_BOT_TOKEN").build()

    app.add_handler(CommandHandler("warn", warn))
    app.add_handler(CommandHandler("mut", mut))
    app.add_handler(CommandHandler("unmut", unmut))
    app.add_handler(CommandHandler("unwarn", unwarn))
    app.add_handler(CommandHandler("rep", rep))
    app.add_handler(CommandHandler("admininfo", admininfo))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(main())
